// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_booking is a generated GoMock package.
package mocks

import (
	models "github.com/booking_backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookingRepository is a mock of BookingRepository interface
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockBookingRepository) Insert(booking *models.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockBookingRepositoryMockRecorder) Insert(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBookingRepository)(nil).Insert), booking)
}

// SelectByID mocks base method
func (m *MockBookingRepository) SelectByID(id uint64) (*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockBookingRepositoryMockRecorder) SelectByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockBookingRepository)(nil).SelectByID), id)
}

// DeleteByID mocks base method
func (m *MockBookingRepository) DeleteByID(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockBookingRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockBookingRepository)(nil).DeleteByID), id)
}

// SelectRoomBookings mocks base method
func (m *MockBookingRepository) SelectRoomBookings(roomID uint64) ([]*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRoomBookings", roomID)
	ret0, _ := ret[0].([]*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRoomBookings indicates an expected call of SelectRoomBookings
func (mr *MockBookingRepositoryMockRecorder) SelectRoomBookings(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRoomBookings", reflect.TypeOf((*MockBookingRepository)(nil).SelectRoomBookings), roomID)
}
