// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_booking is a generated GoMock package.
package mocks

import (
	errors "github.com/booking_backend/internal/helpers/errors"
	models "github.com/booking_backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBookingUseCase is a mock of BookingUseCase interface
type MockBookingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBookingUseCaseMockRecorder
}

// MockBookingUseCaseMockRecorder is the mock recorder for MockBookingUseCase
type MockBookingUseCaseMockRecorder struct {
	mock *MockBookingUseCase
}

// NewMockBookingUseCase creates a new mock instance
func NewMockBookingUseCase(ctrl *gomock.Controller) *MockBookingUseCase {
	mock := &MockBookingUseCase{ctrl: ctrl}
	mock.recorder = &MockBookingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingUseCase) EXPECT() *MockBookingUseCaseMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method
func (m *MockBookingUseCase) CreateBooking(booking *models.Booking) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", booking)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockBookingUseCaseMockRecorder) CreateBooking(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingUseCase)(nil).CreateBooking), booking)
}

// DeleteBooking mocks base method
func (m *MockBookingUseCase) DeleteBooking(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooking", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteBooking indicates an expected call of DeleteBooking
func (mr *MockBookingUseCaseMockRecorder) DeleteBooking(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooking", reflect.TypeOf((*MockBookingUseCase)(nil).DeleteBooking), id)
}

// GetRoomBookings mocks base method
func (m *MockBookingUseCase) GetRoomBookings(roomID uint64) ([]*models.Booking, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomBookings", roomID)
	ret0, _ := ret[0].([]*models.Booking)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetRoomBookings indicates an expected call of GetRoomBookings
func (mr *MockBookingUseCaseMockRecorder) GetRoomBookings(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomBookings", reflect.TypeOf((*MockBookingUseCase)(nil).GetRoomBookings), roomID)
}
