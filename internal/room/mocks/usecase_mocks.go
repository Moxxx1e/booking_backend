// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_room is a generated GoMock package.
package mocks

import (
	errors "github.com/booking_backend/internal/helpers/errors"
	models "github.com/booking_backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoomUseCase is a mock of RoomUseCase interface
type MockRoomUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUseCaseMockRecorder
}

// MockRoomUseCaseMockRecorder is the mock recorder for MockRoomUseCase
type MockRoomUseCaseMockRecorder struct {
	mock *MockRoomUseCase
}

// NewMockRoomUseCase creates a new mock instance
func NewMockRoomUseCase(ctrl *gomock.Controller) *MockRoomUseCase {
	mock := &MockRoomUseCase{ctrl: ctrl}
	mock.recorder = &MockRoomUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomUseCase) EXPECT() *MockRoomUseCaseMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method
func (m *MockRoomUseCase) CreateRoom(room *models.Room) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", room)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom
func (mr *MockRoomUseCaseMockRecorder) CreateRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomUseCase)(nil).CreateRoom), room)
}

// DeleteRoomAndBookings mocks base method
func (m *MockRoomUseCase) DeleteRoomAndBookings(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomAndBookings", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteRoomAndBookings indicates an expected call of DeleteRoomAndBookings
func (mr *MockRoomUseCaseMockRecorder) DeleteRoomAndBookings(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomAndBookings", reflect.TypeOf((*MockRoomUseCase)(nil).DeleteRoomAndBookings), id)
}

// GetRoomsList mocks base method
func (m *MockRoomUseCase) GetRoomsList(sort *models.Sort) ([]*models.Room, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsList", sort)
	ret0, _ := ret[0].([]*models.Room)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetRoomsList indicates an expected call of GetRoomsList
func (mr *MockRoomUseCaseMockRecorder) GetRoomsList(sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsList", reflect.TypeOf((*MockRoomUseCase)(nil).GetRoomsList), sort)
}
