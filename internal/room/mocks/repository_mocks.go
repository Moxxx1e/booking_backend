// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_room is a generated GoMock package.
package mocks

import (
	models "github.com/booking_backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoomRepository is a mock of RoomRepository interface
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockRoomRepository) Insert(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRoomRepositoryMockRecorder) Insert(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRoomRepository)(nil).Insert), room)
}

// DeleteRoomAndBookings mocks base method
func (m *MockRoomRepository) DeleteRoomAndBookings(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomAndBookings", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomAndBookings indicates an expected call of DeleteRoomAndBookings
func (mr *MockRoomRepositoryMockRecorder) DeleteRoomAndBookings(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomAndBookings", reflect.TypeOf((*MockRoomRepository)(nil).DeleteRoomAndBookings), id)
}

// SelectByID mocks base method
func (m *MockRoomRepository) SelectByID(id uint64) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockRoomRepositoryMockRecorder) SelectByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockRoomRepository)(nil).SelectByID), id)
}

// SelectRooms mocks base method
func (m *MockRoomRepository) SelectRooms(sort *models.Sort) ([]*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRooms", sort)
	ret0, _ := ret[0].([]*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRooms indicates an expected call of SelectRooms
func (mr *MockRoomRepositoryMockRecorder) SelectRooms(sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRooms", reflect.TypeOf((*MockRoomRepository)(nil).SelectRooms), sort)
}
